Add new interfaces:
=====================================================================
stm32flash currently supports the following interfaces:
- UART Windows (either "COMn" and "\\.\COMn");
- UART posix/Linux (e.g. "/dev/ttyUSB0");
- I2C Linux through standard driver "i2c-dev" (e.g. "/dev/i2c-n").

Starting from version 0.4, the back-end of stm32flash is modular and
ready to be expanded to support new interfaces.
I'm planning adding SPI on Linux through standard driver "spidev".
You are invited to contribute with more interfaces.

To add a new interface you need to add a new file, populate the struct
port_interface (check at the end of files i2c.c, serial_posix.c and
serial_w32.c) and provide the relative functions to operate on the
interface: open/close, read/write, get_cfg_str and the optional gpio.
The include the new drive in Makefile and register the new struct
port_interface in file port.c in struct port_interface *ports[].

There are several USB-I2C adapter in the market, each providing its
own libraries to communicate with the I2C bus.
Could be interesting to provide as back-end a bridge between stm32flash
and such libraries (I have no plan on this item).


Add new STM32 devices:
=====================================================================
Add a new line in file dev_table.c, in table devices[].
The fields of the table are listed in stm32.h, struct stm32_dev.


Cross compile on Linux host for Windows target with MinGW:
=====================================================================
I'm using a 64 bit Arch Linux machines, and I usually run:
	make CC=x86_64-w64-mingw32-gcc AR=x86_64-w64-mingw32-ar

2014 Antonio Borneo

HELP

Usage: /Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash [-bvngfhc] [-[rw] filename] [tty_device | i2c_device]
	-a bus_address	Bus address (e.g. for I2C port)
	-b rate		Baud rate (default 57600)
	-m mode		Serial port mode (default 8e1)
	-r filename	Read flash to file (or - stdout)
	-w filename	Write flash from file (or - stdout)
	-C		Compute CRC of flash content
	-u		Disable the flash write-protection
	-j		Enable the flash read-protection
	-k		Disable the flash read-protection
	-o		Erase only
	-e n		Only erase n pages before writing the flash
	-v		Verify writes
	-n count	Retry failed writes up to count times (default 10)
	-g address	Start execution at specified address (0 = flash start)
	-S address[:length]	Specify start address and optionally length for
	                   	read/write/erase operations
	-F RX_length[:TX_length]  Specify the max length of RX and TX frame
	-s start_page	Flash at specified page (0 = flash start)
	-f		Force binary parser
	-h		Show this help
	-c		Resume the connection (don't send initial INIT)
			*Baud rate must be kept the same as the first init*
			This is useful if the reset fails
	-R		Reset device at exit.
	-i GPIO_string	GPIO sequence to enter/exit bootloader mode
			GPIO_string=[entry_seq][:[exit_seq]]
			sequence=[[-]signal]&|,[sequence]

GPIO sequence:
	The following signals can appear in a sequence:
	  Integer number representing GPIO pin
	  'dtr', 'rts' or 'brk' representing serial port signal
	The sequence can use the following delimiters:
	  ',' adds 100 ms delay between signals
	  '&' adds no delay between signals
	The following modifiers can be prepended to a signal:
	  '-' reset signal (low) instead of setting it (high)

Examples:

    /* boot0 high, toggle reset before programming. after programming, boot0 low and toggle reset again */
    -w ../sample.hex -i dtr&-rts,rts:-dtr&-rts,rts 55151
    -w ../sample.hex 55151

	Get device information:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash /dev/ttyS0
	  or:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash /dev/i2c-0

	Write with verify and then start execution:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -w filename -v -g 0x0 /dev/ttyS0

	Read flash to file:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -r filename /dev/ttyS0

	Read 100 bytes of flash from 0x1000 to stdout:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -r - -S 0x1000:100 /dev/ttyS0

	Start execution:
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -g 0x0 /dev/ttyS0

	GPIO sequence:
	- entry sequence: GPIO_3=low, GPIO_2=low, 100ms delay, GPIO_2=high
	- exit sequence: GPIO_3=high, GPIO_2=low, 300ms delay, GPIO_2=high
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -i '-3&-2,2:3&-2,,,2' /dev/ttyS0
	GPIO sequence adding delay after port opening:
	- entry sequence: delay 500ms
	- exit sequence: rts=high, dtr=low, 300ms delay, GPIO_2=high
		/Users/jsvirzi/Documents/projects/hayden/stm32flash/cmake-build-debug/stm32flash -R -i ',,,,,:rts&-dtr,,,2' /dev/ttyS0